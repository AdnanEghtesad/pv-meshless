#include "pqSPHManagerDockWindow.h"

// Qt includes
#include <QTreeWidget>
#include <QTreeWidgetItem>
#include <QVariant>
#include <QLabel>
#include <QComboBox>
#include <QTableWidget>
#include <QMessageBox>
#include <QProgressDialog>
#include <QTimer>
#include <QInputDialog>
#include <QFileDialog>
#include <QUrl>
#include <QDesktopServices>
#include <QThread>
#include <QStyleFactory>
#include <QPushButton>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QScrollArea>

// VTK includes

// ParaView Server Manager includes
#include "vtkSMInputProperty.h"
#include "vtkSMProxyManager.h"
#include "vtkSMSourceProxy.h"
#include "vtkSMStringVectorProperty.h"
#include "vtkSMIntVectorProperty.h"
#include "vtkSMArraySelectionDomain.h"
#include "vtkSMProxyProperty.h"
#include "vtkSMViewProxy.h"
#include "vtkSMRepresentationProxy.h"
#include "vtkSMPropertyHelper.h"
#include "vtkProcessModule.h"
#include "vtkProcessModuleConnectionManager.h"

// ParaView includes
#include "pqActiveServer.h"
#include "pqApplicationCore.h"
#include "pqAutoGeneratedObjectPanel.h"
#include "pqSettings.h"
#include "pqOutputPort.h"
#include "pqPipelineSource.h"
#include "pqProxy.h"
#include "pqServer.h"
#include "pqServerManagerSelectionModel.h"
#include "pqServerManagerModelItem.h"
#include "pqServerManagerModel.h"
#include "pqSMAdaptor.h"
#include "pqTreeWidgetCheckHelper.h"
#include "pqTreeWidgetItemObject.h"
#include "pqTreeWidget.h"
#include "pqTreeWidgetItem.h"
#include "pqView.h"
#include "pqRenderView.h"
#include "pqActiveView.h"
#include "pqDataRepresentation.h"
#include "pqActiveObjects.h"
#include "pqDisplayPolicy.h"
#include "pqAnimationScene.h"
#include "pqPropertyManager.h"
#include "pqUndoStack.h"
//
#include "pqSPHManagerPanel.h"
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
class pqSPHManagerDockWindow::pqUI : public QObject 
{
public:
  pqUI(pqSPHManagerDockWindow* p) : QObject((QDockWidget*)p)
  {
    this->SPHpanel         = NULL;
    this->SPHInitialized   = 0;
  }
  //
  ~pqUI() {
  }

  void CreateProxy() {
    vtkSMProxyManager *pm = vtkSMProxy::GetProxyManager();
    this->SPHProxy.TakeReference(pm->NewProxy("meshless_helpers", "SPHManager"));
    this->pqSPHProxy = new pqProxy("meshless_helpers", "SPHManager", SPHProxy, 0, 0);
    this->SPHProxy->UpdatePropertyInformation();
  }

  //
  bool ProxyCreated() { return this->SPHProxy!=NULL; }
  pqSPHManagerPanel          *SPHpanel; 
  int                         SPHInitialized;
  vtkSmartPointer<vtkSMProxy> SPHProxy;
  pqProxy                    *pqSPHProxy;
};
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
pqSPHManagerDockWindow::pqSPHManagerDockWindow(QWidget* p) : QDockWidget("SPH Manager", p) 
{
  this->UI = new pqSPHManagerDockWindow::pqUI(this);
//  this->UI->setupUi(this);

  QWidget *dockWidgetContents = new QWidget();
  QVBoxLayout* mainLayout = new QVBoxLayout(dockWidgetContents);
  mainLayout->setMargin(0);

  //
  // Most of the following code is taken from pqObjectInspector
  //

  QScrollArea*s = new QScrollArea();
  s->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
  s->setHorizontalScrollBarPolicy(Qt::ScrollBarAsNeeded);
  s->setWidgetResizable(true);
  s->setFrameShape(QFrame::NoFrame);

  if (this->SPHReady()) {
    this->SPHManagerPanel = new pqSPHManagerPanel(this->UI->pqSPHProxy,NULL);
    s->setWidget(this->SPHManagerPanel);
  }


  QBoxLayout* buttonlayout = new QHBoxLayout();
  this->AcceptButton = new QPushButton(this);
  this->AcceptButton->setObjectName("Accept");
  this->AcceptButton->setText(tr("&Apply"));
  this->AcceptButton->setIcon(QIcon(QPixmap(":/pqWidgets/Icons/pqUpdate16.png")));
#ifdef Q_WS_MAC
  this->AcceptButton->setShortcut(QKeySequence(Qt::AltModifier + Qt::Key_A));
#endif
  this->ResetButton = new QPushButton(this);
  this->ResetButton->setObjectName("Reset");
  this->ResetButton->setText(tr("&Reset"));
  this->ResetButton->setIcon(QIcon(QPixmap(":/pqWidgets/Icons/pqCancel16.png")));
#ifdef Q_WS_MAC
  this->ResetButton->setShortcut(QKeySequence(Qt::AltModifier + Qt::Key_R));
#endif

  buttonlayout->addStretch();
  buttonlayout->addWidget(this->AcceptButton);
  buttonlayout->addWidget(this->ResetButton);
  buttonlayout->addStretch();

  mainLayout->addLayout(buttonlayout);
  mainLayout->addWidget(s);

  this->connect(this->AcceptButton, SIGNAL(clicked()), SLOT(accept()));
  this->connect(this->ResetButton, SIGNAL(clicked()), SLOT(reset()));

  this->AcceptButton->setEnabled(false);
  this->ResetButton->setEnabled(false);

  // if XP Style is being used
  // swap it out for cleanlooks which looks almost the same
  // so we can have a green accept button
  // make all the buttons the same
  QString styleName = this->AcceptButton->style()->metaObject()->className();
  if(styleName == "QWindowsXPStyle")
     {
     QStyle* st = QStyleFactory::create("cleanlooks");
     st->setParent(this);
     this->AcceptButton->setStyle(st);
     this->ResetButton->setStyle(st);
     QPalette buttonPalette = this->AcceptButton->palette();
     buttonPalette.setColor(QPalette::Button, QColor(244,246,244));
     this->AcceptButton->setPalette(buttonPalette);
     this->ResetButton->setPalette(buttonPalette);
     }

  // Change the accept button palette so it is green when it is active.
  QPalette acceptPalette = this->AcceptButton->palette();
  acceptPalette.setColor(QPalette::Active, QPalette::Button, QColor(161, 213, 135));
  this->AcceptButton->setPalette(acceptPalette);
  this->AcceptButton->setDefault(true);

  //
  this->setWidget(dockWidgetContents);

  QObject::connect(this->SPHManagerPanel, SIGNAL(modified()),
    this, SLOT(updateAcceptState()));

  QObject::connect(this->UI->pqSPHProxy,
    SIGNAL(modifiedStateChanged(pqServerManagerModelItem*)),
    this, SLOT(updateAcceptState()));

  this->updateAcceptState();
  //
  this->SPHManagerPanel->LoadSettings();
}
//----------------------------------------------------------------------------
pqSPHManagerDockWindow::~pqSPHManagerDockWindow()
{
  this->SPHManagerPanel->SaveSettings();
}
//---------------------------------------------------------------------------
bool pqSPHManagerDockWindow::ProxyReady()
{
  if (!this->UI->ProxyCreated()) {
    this->UI->CreateProxy();
    return this->UI->ProxyCreated();
  }
  return true;
}
//---------------------------------------------------------------------------
bool pqSPHManagerDockWindow::SPHReady()
{
  if (!this->ProxyReady()) return 0;
  //
  if (!this->UI->SPHInitialized) {
    //
//    bool server = (this->UI->dsmIsServer->isChecked() || this->UI->dsmIsStandalone->isChecked());
//    pqSMAdaptor::setElementProperty(
//      this->UI->SPHProxy->GetProperty("DsmIsServer"), server);
    //
    //
    this->UI->SPHProxy->UpdateVTKObjects();
//    this->UI->SPHProxy->InvokeCommand("CreateSPH");
    this->UI->SPHInitialized = 1;
  }
  return this->UI->SPHInitialized;
}
//-----------------------------------------------------------------------------
void pqSPHManagerDockWindow::setModified()
{
  emit this->modified();
}
//----------------------------------------------------------------------------
void pqSPHManagerDockWindow::showEvent( QShowEvent * event )
{
  QDockWidget::showEvent( event );
}
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
void pqSPHManagerDockWindow::accept()
{
  BEGIN_UNDO_SET("Apply");
  emit this->preaccept();

  QSet<pqProxy*> proxies_to_show;

  if (this->SPHManagerPanel)
    {
    int modified_state = this->UI->pqSPHProxy->modifiedState();
    if (modified_state == pqProxy::UNINITIALIZED)
      {
//      proxies_to_show.insert(refProxy);
      }
    this->SPHManagerPanel->accept();
    }

  emit this->accepted();
  emit this->postaccept();

  END_UNDO_SET();

  // Essential to render all views.
//  pqApplicationCore::instance()->render();
}

//-----------------------------------------------------------------------------
void pqSPHManagerDockWindow::reset()
{
  emit this->prereject();

  if(this->SPHManagerPanel)
    {
    this->SPHManagerPanel->reset();
    }

  emit this->postreject();
}
//-----------------------------------------------------------------------------
void pqSPHManagerDockWindow::canAccept(bool status)
{

  this->AcceptButton->setEnabled(status);

  bool resetStatus = status;
  if(resetStatus && this->SPHManagerPanel &&
     this->UI->pqSPHProxy->modifiedState() ==
     pqProxy::UNINITIALIZED)
    {
    resetStatus = false;
    }
  this->ResetButton->setEnabled(resetStatus);
}
//-----------------------------------------------------------------------------
void pqSPHManagerDockWindow::updateAcceptState()
{
  // watch for modified state changes
  bool acceptable = false;
  if(this->UI->pqSPHProxy->modifiedState() != pqProxy::UNMODIFIED)
    {
    acceptable = true;
    }
  this->canAccept(acceptable);
  if (acceptable)
    {
    emit this->canAccept();
    }
}

//-----------------------------------------------------------------------------
