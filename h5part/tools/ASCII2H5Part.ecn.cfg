###################################################
# Filename generation
###################################################

# The file structure is quite complex with each variable in its own file 
# the total naming consists of 5 parts, 
# prefix, block number, some extra text, the variable and an extension

FileNamePattern
PREFIX BLOCK TEXT0 VAR EXT

# The filename prefix is described by a regular expression, any leading non-numeric characters are included in the prefix
PREFIX_RegEx
(.*[^0-9])?

# The block number part of the filename is one or more consequtive numeric characters
BLOCK_RegEx
([0-9]+)

# The variable name is essentially any characters (one or more of them)
VAR_RegEx
(.+)

# followed by the extensio of .*
EXT_RegEx
(\..*)

# The extra text can be any characters (zero or more of them)
TEXT0_RegEx
(.*)

###################################################
# Names and Storage of scalar/vector fields inside the Ascii files
###################################################

# There are 7 different variables and we define their names as follows
FieldNames
Position,H,Velocity
#Position,Pressure,Rho,Velocity,Val1,Val2,Val3

# The 7 variables mentioned above are generated by combining the following (11) columns of the ascii data.
# * * * Note carefully the position of the comma delimiters in the FieldIndices definition * * *
# * * * Note that the position coordinates {x,y,z} must be the first field variable listed

# Caution : The field indices refer to the index of the alphabetically sorted list of VARs from the file names.
# P, Rho, U, V, W, X, Y, Z, val1, val2, val3
# Position (3 components, columns 5,6,7)
# Pressure (1 component, column 0)
# Rho (1 components, column 1)
# Velocity (3 components, columns 2,3,4)
# etc etc

# Caution : The field indices refer to the index of the alphabetically sorted list of VARs from the file names.
# H, U, V, W, X, Y, Z

FieldIndices
4 5 6,0,1 2 3

###################################################
# Time
###################################################

# If a line which matches this regular expression is found, then the Time Value for the current time step
# will be extracted from the bracketed part of the expression
TimeExpression
t= +([0-9E+-.]+)

###################################################
# Ignore certain lines
###################################################

# If a line matches (i.e. contains) this regular expression, it will be ignored from further processing
# this can be used to skip header lines - or repeated stuff at the start of each time step etc.
IgnoreExpression
I=